// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE

import * as Block from "../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../node_modules/bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Emotion from "../../node_modules/bs-emotion/src/Emotion.bs.js";
import * as Helpers from "../Helpers.bs.js";
import * as Belt_Array from "../../node_modules/bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "../../node_modules/bs-platform/lib/es6/caml_option.js";
import * as NutritionixApi from "../Helpers/NutritionixApi.bs.js";

var list = Emotion.css(undefined, /* :: */Block.simpleVariant("::", [
        Emotion.listStyle(/* none */-922086728, /* inside */501235708, /* none */-922086728),
        /* :: */Block.simpleVariant("::", [
            Emotion.select("& > li", /* :: */Block.simpleVariant("::", [
                    Emotion.display(/* flex */-1010954439),
                    /* :: */Block.simpleVariant("::", [
                        Emotion.alignItems(/* center */98248149),
                        /* [] */0
                      ])
                  ])),
            /* :: */Block.simpleVariant("::", [
                Emotion.select("& > li > span", /* :: */Block.simpleVariant("::", [
                        Emotion.width(Emotion.px(30)),
                        /* :: */Block.simpleVariant("::", [
                            Emotion.display(/* flex */-1010954439),
                            /* :: */Block.simpleVariant("::", [
                                Emotion.justifyContent(/* center */98248149),
                                /* :: */Block.simpleVariant("::", [
                                    Emotion.marginRight(Emotion.px(15)),
                                    /* [] */0
                                  ])
                              ])
                          ])
                      ])),
                /* :: */Block.simpleVariant("::", [
                    Emotion.select("& > li > span > img", /* :: */Block.simpleVariant("::", [
                            Emotion.maxWidth(Emotion.px(30)),
                            /* :: */Block.simpleVariant("::", [
                                Emotion.maxHeight(Emotion.px(30)),
                                /* [] */0
                              ])
                          ])),
                    /* [] */0
                  ])
              ])
          ])
      ]));

var Styles = /* module */Block.localModule(["list"], [list]);

function reducer(state, action) {
  switch (action.tag | 0) {
    case 0 : 
        return /* record */Block.record([
                  "typing",
                  "value",
                  "autoComplete"
                ], [
                  action[0],
                  state[/* value */1],
                  state[/* autoComplete */2]
                ]);
    case 1 : 
        return /* record */Block.record([
                  "typing",
                  "value",
                  "autoComplete"
                ], [
                  state[/* typing */0],
                  action[0],
                  state[/* autoComplete */2]
                ]);
    case 2 : 
        return /* record */Block.record([
                  "typing",
                  "value",
                  "autoComplete"
                ], [
                  state[/* typing */0],
                  state[/* value */1],
                  action[0]
                ]);
    
  }
}

function FoodAutoComplete(Props) {
  var match = React.useReducer(reducer, /* record */Block.record([
          "typing",
          "value",
          "autoComplete"
        ], [
          0,
          "",
          undefined
        ]));
  var dispatch = match[1];
  var state = match[0];
  var intervalId = React.useRef(undefined);
  React.useEffect((function () {
          var match = state[/* typing */0];
          if (match >= 2) {
            if (state[/* value */1].length >= 3) {
              NutritionixApi.fetchAutoComplete(state[/* value */1], (function (res) {
                      if (res.tag) {
                        console.log(res[0]);
                        return /* () */0;
                      } else {
                        return Curry._1(dispatch, /* SetAutoComplete */Block.variant("SetAutoComplete", 2, [res[0]]));
                      }
                    }));
              Curry._1(dispatch, /* SetTyping */Block.variant("SetTyping", 0, [/* Idle */0]));
            } else {
              Curry._1(dispatch, /* SetTyping */Block.variant("SetTyping", 0, [/* Idle */0]));
            }
          }
          return undefined;
        }), /* array */[state[/* typing */0]]);
  var match$1 = state[/* autoComplete */2];
  return React.createElement("div", undefined, React.createElement("input", {
                  type: "text",
                  value: state[/* value */1],
                  onChange: (function (e) {
                      var match = intervalId.current;
                      if (match !== undefined) {
                        clearTimeout(Caml_option.valFromOption(match));
                      }
                      intervalId.current = Caml_option.some(setTimeout((function (param) {
                                  return Curry._1(dispatch, /* SetTyping */Block.variant("SetTyping", 0, [/* Fetching */2]));
                                }), 1000));
                      var match$1 = state[/* typing */0];
                      if (match$1 === 0) {
                        Curry._1(dispatch, /* SetTyping */Block.variant("SetTyping", 0, [/* Typing */1]));
                      }
                      return Curry._1(dispatch, /* SetValue */Block.variant("SetValue", 1, [e.target.value]));
                    })
                }), match$1 !== undefined ? React.createElement("ul", {
                    className: list
                  }, Belt_Array.map(match$1, (function (food) {
                          return React.createElement("li", {
                                      key: food[/* foodName */0]
                                    }, React.createElement("span", undefined, React.createElement("img", {
                                              alt: food[/* foodName */0],
                                              src: food[/* photo */6][/* thumb */0]
                                            })), Helpers.capitalize(food[/* foodName */0]));
                        }))) : null);
}

var make = FoodAutoComplete;

export {
  Styles ,
  reducer ,
  make ,
  
}
/* list Not a pure module */
